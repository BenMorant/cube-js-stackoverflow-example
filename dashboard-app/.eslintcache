[{"/home/benjamin/stackoverflow__example/dashboard-app/src/index.js":"1","/home/benjamin/stackoverflow__example/dashboard-app/src/App.js":"2","/home/benjamin/stackoverflow__example/dashboard-app/src/pages/ExplorePage.js":"3","/home/benjamin/stackoverflow__example/dashboard-app/src/pages/DashboardPage.js":"4","/home/benjamin/stackoverflow__example/dashboard-app/src/components/Choropleth.js":"5","/home/benjamin/stackoverflow__example/dashboard-app/src/components/Header.js":"6","/home/benjamin/stackoverflow__example/dashboard-app/src/components/ClickEvent.js":"7","/home/benjamin/stackoverflow__example/dashboard-app/src/components/Heatmap.js":"8","/home/benjamin/stackoverflow__example/dashboard-app/src/components/Points.js":"9","/home/benjamin/stackoverflow__example/dashboard-app/src/graphql/queries.js":"10"},{"size":516,"mtime":1612183298163,"results":"11","hashOfConfig":"12"},{"size":4960,"mtime":1612184811670,"results":"13","hashOfConfig":"12"},{"size":1852,"mtime":1612183298163,"results":"14","hashOfConfig":"12"},{"size":1764,"mtime":1612183298163,"results":"15","hashOfConfig":"12"},{"size":3043,"mtime":1612184740526,"results":"16","hashOfConfig":"12"},{"size":755,"mtime":1612184761046,"results":"17","hashOfConfig":"12"},{"size":5274,"mtime":1612184740526,"results":"18","hashOfConfig":"12"},{"size":4488,"mtime":1612184602517,"results":"19","hashOfConfig":"12"},{"size":3901,"mtime":1612184602517,"results":"20","hashOfConfig":"12"},{"size":350,"mtime":1612183298163,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1xywfuo",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/benjamin/stackoverflow__example/dashboard-app/src/index.js",[],["49","50"],"/home/benjamin/stackoverflow__example/dashboard-app/src/App.js",[],"/home/benjamin/stackoverflow__example/dashboard-app/src/pages/ExplorePage.js",["51","52","53","54"],"import React, { useState } from 'react';\nimport { Alert, Button, Spin } from 'antd';\nimport { useQuery } from '@apollo/react-hooks';\nimport { withRouter } from 'react-router-dom';\nimport ExploreQueryBuilder from '../components/QueryBuilder/ExploreQueryBuilder';\nimport { GET_DASHBOARD_ITEM } from '../graphql/queries';\nimport TitleModal from '../components/TitleModal.js';\nconst ExplorePage = withRouter(({\n  history,\n  location\n}) => {\n  const [addingToDashboard, setAddingToDashboard] = useState(false);\n  const params = new URLSearchParams(location.search);\n  const itemId = params.get('itemId');\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_DASHBOARD_ITEM, {\n    variables: {\n      id: itemId\n    },\n    skip: !itemId\n  });\n  const [vizState, setVizState] = useState(null);\n  const finalVizState = vizState || itemId && !loading && data && JSON.parse(data.dashboardItem.vizState) || {};\n  const [titleModalVisible, setTitleModalVisible] = useState(false);\n  const [title, setTitle] = useState(null);\n  const finalTitle = title != null ? title : itemId && !loading && data && data.dashboardItem.name || 'New Chart';\n\n  if (loading) {\n    return <Spin />;\n  }\n\n  if (error) {\n    return <Alert type=\"error\" message={error.toString()} />;\n  }\n\n  return <div>\n      <TitleModal history={history} itemId={itemId} titleModalVisible={titleModalVisible} setTitleModalVisible={setTitleModalVisible} setAddingToDashboard={setAddingToDashboard} finalVizState={finalVizState} setTitle={setTitle} finalTitle={finalTitle} />\n      <ExploreQueryBuilder vizState={finalVizState} setVizState={setVizState} chartExtra={[<Button key=\"button\" type=\"primary\" loading={addingToDashboard} onClick={() => setTitleModalVisible(true)}>\n            {itemId ? 'Update' : 'Add to Dashboard'}\n          </Button>]} />\n    </div>;\n});\nexport default ExplorePage;","/home/benjamin/stackoverflow__example/dashboard-app/src/pages/DashboardPage.js",[],"/home/benjamin/stackoverflow__example/dashboard-app/src/components/Choropleth.js",["55"],"import MapGL, { Layer, NavigationControl, Source } from 'react-map-gl';\nimport React, { useState } from 'react';\n\nimport { Radio } from 'antd';\nimport { useCubeQuery } from \"@cubejs-client/react\";\n\nconst options = [\n  {\n    'fill-color': {\n      property: 'value',\n      stops: [\n        [1000000, `rgba(255,100,146,0.1)`],\n        [10000000, `rgba(255,100,146,0.4)`],\n        [50000000, `rgba(255,100,146,0.8)`],\n        [100000000, `rgba(255,100,146,1)`]\n      ]\n    }\n  },\n  {\n    type: 'symbol',\n    layout: {\n      'text-field': ['number-format', ['get', 'value'], { 'min-fraction-digits': 0, 'max-fraction-digits': 0 }],\n      'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n      'text-size': {\n        property: 'value',\n        stops: [\n          [{ zoom: 0, value: 100000 }, 9],\n          [{ zoom: 0, value: 1000000 }, 10],\n          [{ zoom: 0, value: 50000000 }, 12],\n          [{ zoom: 0, value: 100000000 }, 14]\n        ]\n      }\n    },\n    paint: {\n      'text-color': ['case', ['<', ['get', 'value'], 100000000], '#43436B', '#43436B'],\n      'text-halo-color': '#FFFFFF',\n      'text-halo-width': 1\n    }\n  }\n];\n\nexport default () => {\n  const [viewport, setViewport] = useState({\n    latitude: 34,\n    longitude: 5,\n    zoom: 1.5\n  });\n  const [mode, setMode] = useState('total');\n\n  const data = {\n    type: 'FeatureCollection',\n    features: []\n  };\n\n  const { resultSet } = useCubeQuery({\n    measures: [`Users.${mode}`],\n    dimensions: ['Users.country', 'MapboxCoords.coordinates']\n  });\n\n  if (resultSet) {\n    resultSet\n      .tablePivot()\n      .filter((item) => item['MapboxCoords.coordinates'] != null)\n      .forEach((item) => {\n        data['features'].push({\n          type: 'Feature',\n          properties: {\n            name: item['Users.country'],\n            value: parseInt(item[`Users.${mode}`])\n          },\n          geometry: {\n            type: 'Polygon',\n            coordinates: [item['MapboxCoords.coordinates'].split(';').map((item) => item.split(','))]\n          }\n        });\n      });\n  }\n\n  const onChangeMode = (e) => {\n    setMode(e.target.value);\n  };\n\n  return (\n    <div className=\"mapbox__container\">\n      <div className=\"mapbox__legend\">\n        <Radio.Group onChange={onChangeMode} defaultValue=\"total\">\n          <Radio.Button value=\"total\">total</Radio.Button>\n          <Radio.Button value=\"avg\">average</Radio.Button>\n        </Radio.Group>\n      </div>\n      <MapGL\n        {...viewport}\n        onViewportChange={(viewport) => {\n          setViewport(viewport);\n        }}\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle=\"mapbox://styles/kalipsik/ckb2fyfqu123n1ilb5yi7uyns\"\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_KEY}\n      >\n        <div className=\"mapbox__navi\">\n          <NavigationControl />\n        </div>\n        <Source type=\"geojson\" data={data}>\n          <Layer beforeId=\"country-label\" id=\"countries\" type=\"fill\" paint={options[0]} />\n          <Layer {...options[1]} />\n        </Source>\n      </MapGL>\n    </div>\n  );\n};","/home/benjamin/stackoverflow__example/dashboard-app/src/components/Header.js",[],"/home/benjamin/stackoverflow__example/dashboard-app/src/components/ClickEvent.js",["56"],"import MapGL, { Layer, NavigationControl, Popup, Source } from 'react-map-gl';\nimport { Radio, Spin } from \"antd\";\nimport React, { useState } from 'react';\n\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { useCubeQuery } from \"@cubejs-client/react\";\n\nexport default () => {\n  const [viewport, setViewport] = useState({\n    latitude: 34,\n    longitude: 5,\n    zoom: 2\n  });\n\n  const [mode, setMode] = useState('both');\n\n  const [selectedPoint, setSelectedPoint] = useState(null);\n\n  const { resultSet: questionsSet } = useCubeQuery({\n    measures: [\n      'Questions.count'\n    ],\n    dimensions: [\n      'Users.geometry',\n    ],\n    order: {\n      'Questions.views': 'desc',\n    }\n  });\n\n  const { resultSet: answersSet } = useCubeQuery({\n    measures: ['Answers.count'],\n    dimensions: [\n      'Users.geometry',\n    ],\n  });\n\n\n  const { resultSet: popupSet } = useCubeQuery({\n    dimensions: [\n      'Users.geometry',\n      'Questions.title',\n      'Questions.views',\n      'Questions.tags'\n    ],\n    filters: [{\n      member: \"Users.geometry\",\n      operator: \"contains\",\n      values: [selectedPoint]\n    }],\n  }, { skip: selectedPoint === null });\n\n  const dataQuestions = {\n    type: 'FeatureCollection',\n    features: [],\n  };\n\n\n  const dataAnswers = {\n    type: 'FeatureCollection',\n    features: [],\n  };\n\n\n  if (questionsSet) {\n    questionsSet.tablePivot().forEach((item) => {\n      dataQuestions['features'].push({\n        type: 'Feature',\n        properties: {\n          count: item['Questions.count'],\n          geometry: item['Users.geometry'],\n          id: item['Users.id'],\n        },\n        geometry: JSON.parse(item['Users.geometry'])\n      });\n    });\n  }\n\n  if (answersSet) {\n    answersSet.tablePivot().forEach((item) => {\n      dataAnswers['features'].push({\n        type: 'Feature',\n        geometry: JSON.parse(item['Users.geometry']),\n      });\n    });\n  }\n\n  let renderPopup = null;\n  if (popupSet && selectedPoint) {\n    renderPopup = (\n      <Popup\n        className='mapbox__popup'\n        closeButton={false}\n        tipSize={5}\n        anchor='top'\n        longitude={JSON.parse(selectedPoint).coordinates[0]}\n        latitude={JSON.parse(selectedPoint).coordinates[1]}\n        captureScroll={true}\n      >\n        <Scrollbars\n          autoHeight\n          autoHeightMin={0}\n          autoHeightMax={300}\n        >\n          {popupSet.tablePivot().map((item, i) => (\n            <div className=\"mapbox__popup__item\" key={i}>\n              <h3>{item['Questions.title']}</h3>\n              <div>\n                Views count: {item['Questions.views']}<br />\n          Tags: {item['Questions.tags'].replace(/\\|/g, ', ')}\n              </div>\n            </div>\n          ))}\n        </Scrollbars>\n      </Popup>\n    );\n  }\n\n  const onChangeMode = (e) => {\n    setMode(e.target.value);\n    setSelectedPoint(null);\n  }\n\n  const onClickMap = (event) => {\n    setSelectedPoint(null);\n    if (typeof event.features != 'undefined') {\n      const feature = event.features.find(\n        (f) => f.layer.id === 'questions-point'\n      );\n      if (feature) {\n        setSelectedPoint(feature.properties.geometry);\n      }\n    }\n  }\n\n\n  return (\n    <div className='mapbox__container'>\n      <div className=\"mapbox__legend\">\n        <Radio.Group onChange={onChangeMode} defaultValue=\"both\">\n          <Radio.Button value=\"qu\"><i className=\"mapbox__icon__questions\"></i>questions</Radio.Button>\n          <Radio.Button value=\"ans\"><i className=\"mapbox__icon__answers\"></i>answers</Radio.Button>\n          <Radio.Button value=\"both\">both</Radio.Button>\n        </Radio.Group>\n      </div>\n      <MapGL\n        {...viewport}\n        onViewportChange={(viewport) => {\n          setViewport(viewport)\n        }}\n        width='100%'\n        height='100%'\n        onClick={onClickMap}\n        interactiveLayerIds={['questions-point']}\n        mapStyle='mapbox://styles/kalipsik/ckb2fyfqu123n1ilb5yi7uyns/'\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_KEY}\n      >\n        <div className='mapbox__navi'>\n          <NavigationControl />\n        </div>\n        <Source type='geojson' data={dataAnswers}>\n          <Layer {...{\n            id: 'answers-point',\n            type: 'circle',\n            filter: (mode !== 'qu') ? ['!', ['has', ' ']] : ['has', ['get', 'id']],\n            paint: {\n              'circle-radius': ['interpolate', ['linear'], ['zoom'], 0, 1, 12, 8],\n              'circle-stroke-width': 0,\n              'circle-opacity': 0.7,\n              'circle-color': '#E1FFAF',\n            }\n          }} />\n        </Source>\n        <Source type='geojson' data={dataQuestions}>\n          <Layer {...{\n            id: 'questions-point',\n            type: 'circle',\n            filter: (mode !== 'ans') ? ['!', ['has', ' ']] : ['has', ['get', 'id']],\n            paint: {\n              'circle-radius': ['interpolate', ['linear'], ['zoom'], 0, 1, 12, 15],\n              'circle-stroke-width': 0,\n              'circle-opacity': 0.7,\n              'circle-color': '#FF6492',\n            }\n          }} />\n        </Source>\n        {renderPopup}\n      </MapGL>\n      {selectedPoint && !popupSet ? (<div className=\"mapbox__spinner\">\n        <Spin className=\"mapbox__spinner__icon\" />\n      </div>) : null}\n    </div>\n  )\n}","/home/benjamin/stackoverflow__example/dashboard-app/src/components/Heatmap.js",["57"],"import { Button, Slider } from 'antd';\nimport MapGL, { Layer, NavigationControl, Source } from 'react-map-gl';\nimport React, { useState } from 'react';\n\nimport { useCubeQuery } from \"@cubejs-client/react\";\n\nconst sample = [\n  [\n    {\n      step: 0,\n      color: \"rgba(255, 102, 148, 0)\"\n    },\n    {\n      step: 0.33,\n      color: \"rgba(255, 102, 148, 0.2)\"\n    },\n    {\n      step: 0.66,\n      color: \"#FFF4E0\"\n    },\n    {\n      step: 1,\n      color: \"#FF6694\"\n    }\n  ],\n  [\n    {\n      step: 0,\n      color: \"hsla(328, 0%, 100%, 0)\"\n    },\n    {\n      step: 0.33,\n      color: \"hsl(275, 18%, 60%)\"\n    },\n    {\n      step: 0.66,\n      color: \"hsl(350, 68%, 52%)\"\n    },\n    {\n      step: 1,\n      color: \"hsl(47, 100%, 87%)\"\n    }\n  ],\n  [\n    {\n      step: 0,\n      color: \"hsla(328, 0%, 100%, 0)\"\n    },\n    {\n      step: 0.33,\n      color: \"#F3F3FB\"\n    },\n    {\n      step: 0.66,\n      color: \"hsl(200, 74%, 52%)\"\n    },\n    {\n      step: 1,\n      color: \"hsl(173, 81%, 96%)\"\n    }\n  ]\n]\n\nexport default () => {\n  const [viewport, setViewport] = useState({\n    latitude: 34,\n    longitude: 5,\n    zoom: 1.5,\n  })\n\n  const [intensity, setIntensity] = useState(0.1);\n  const [weight, setWeight] = useState(2);\n  const [radius, setRadius] = useState(11);\n\n  const [colorState, setColorState] = useState(0);\n\n\n  const { resultSet } = useCubeQuery({\n    measures: ['Users.count'],\n    dimensions: [\n      'Users.geometry',\n    ],\n    limit: 50000\n  });\n\n\n  const data = {\n    type: 'FeatureCollection',\n    features: [],\n  };\n\n  if (resultSet) {\n    resultSet.tablePivot().forEach((item) => {\n      data['features'].push({\n        type: 'Feature',\n        properties: {\n          value: parseInt(item['Users.count']),\n        },\n        geometry: JSON.parse(item['Users.geometry']),\n      });\n    });\n  }\n\n  const renderButtons = sample.map((item, i) => (\n    <Button key={i} className={colorState === i ? 'mapbox__sample__button mapbox__sample__button--active' : 'mapbox__sample__button'} onClick={() => { setColorState(i) }}>\n      <span style={{ background: `linear-gradient(90deg, ${item[3]['color']} 0%, ${item[2]['color']} 50%,${item[1]['color']} 100%)` }}></span>\n    </Button>\n  ));\n\n\n  return (\n    <div className='mapbox__container'>\n      <MapGL\n        {...viewport}\n        onViewportChange={(viewport) => {\n          setViewport(viewport)\n        }}\n        width='100%'\n        height='100%'\n        mapStyle='mapbox://styles/kalipsik/ckb2fyfqu123n1ilb5yi7uyns/'\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_KEY}\n      >\n        <div className='mapbox__navi'>\n          <NavigationControl />\n        </div>\n        <Source type='geojson' data={data}>\n          <Layer {...{\n            type: 'heatmap',\n            paint: {\n              'heatmap-intensity': intensity,\n              'heatmap-radius': radius,\n              'heatmap-weight': ['interpolate', ['linear'], ['get', 'value'], 0, 0, 6, weight],\n              'heatmap-color': [\n                \"interpolate\", [\"linear\"], [\"heatmap-density\"],\n                sample[colorState][0].step, sample[colorState][0].color,\n                sample[colorState][1].step, sample[colorState][1].color,\n                sample[colorState][2].step, sample[colorState][2].color,\n                sample[colorState][3].step, sample[colorState][3].color,\n              ],\n              'heatmap-opacity': 1,\n            },\n          }} />\n        </Source>\n      </MapGL>\n      <div className='mapbox__legend__range'>\n        <div className='mapbox__legend__row'>\n          <label><span>heatmap-intensity</span><span>{intensity}</span></label>\n          <Slider min={0} max={2} defaultValue={intensity} tooltipVisible={false} step={0.1} onChange={(value) => { setIntensity(value) }} />\n        </div>\n\n        <div className='mapbox__legend__row'>\n          <label><span>heatmap-weight</span><span>{weight}</span></label>\n          <Slider min={0} max={10} defaultValue={weight} step={0.5} tooltipVisible={false} onChange={(value) => { setWeight(value) }} />\n        </div>\n\n        <div className='mapbox__legend__row'>\n          <label><span>heatmap-radius</span><span>{radius}</span></label>\n          <Slider min={0} max={20} defaultValue={radius} step={1} tooltipVisible={false} onChange={(value) => { setRadius(value) }} />\n        </div>\n\n        <div className='mapbox__legend__row'>\n          <label><span>sample palletes</span></label>\n          {renderButtons}\n        </div>\n\n      </div>\n    </div>);\n}\n","/home/benjamin/stackoverflow__example/dashboard-app/src/components/Points.js",["58"],"import { Col, Row, Slider, Tooltip } from \"antd\";\nimport MapGL, { Layer, NavigationControl, Source } from 'react-map-gl';\nimport React, { useEffect, useState } from 'react';\n\nimport { useCubeQuery } from \"@cubejs-client/react\";\n\nexport default () => {\n  const [viewport, setViewport] = useState({\n    latitude: 34,\n    longitude: 5,\n    zoom: 1.5,\n  })\n\n  const [sliderInitMin, setsliderInitMin] = useState(0);\n  const [sliderInitMax, setSliderInitMin] = useState(0);\n  const [sliderCurMin, setSliderCurMin] = useState(0);\n  const [sliderCurMax, setSliderCurMax] = useState(0);\n  const [queryMin, setQueryMin] = useState(0);\n  const [queryMax, setQueryMax] = useState(0);\n\n  const { resultSet: sliderInitQuery } = useCubeQuery({\n    measures: ['Users.max', 'Users.min']\n  });\n\n  const { resultSet: points } = useCubeQuery({\n    measures: [\n      'Users.max'\n    ],\n    dimensions: [\n      'Users.geometry',\n    ],\n    filters: [\n      {\n        member: \"Users.value\",\n        operator: \"lte\",\n        values: [queryMax.toString()]\n      },\n      {\n        member: \"Users.value\",\n        operator: \"gte\",\n        values: [queryMin.toString()]\n      }\n    ]\n  });\n\n  const data = {\n    type: 'FeatureCollection',\n    features: []\n  };\n\n  useEffect(() => {\n    if (sliderInitQuery) {\n      const range = sliderInitQuery.tablePivot()[0];\n      setSliderInitMin(range['Users.max']);\n      setsliderInitMin(range['Users.min']);\n      setSliderCurMax(range['Users.max']);\n      setSliderCurMin(range['Users.max'] * 0.4);\n      setQueryMax(range['Users.max']);\n      setQueryMin(range['Users.max'] * 0.4);\n    }\n  }, [sliderInitQuery]);\n\n  if (points) {\n    points.tablePivot().forEach((item) => {\n      data['features'].push({\n        type: 'Feature',\n        properties: {\n          value: parseInt(item['Users.max']),\n        },\n        geometry: JSON.parse(item['Users.geometry']),\n      });\n    });\n  }\n\n\n  const onChange = (value) => {\n    setSliderCurMin(value[0]);\n    setSliderCurMax(value[1]);\n  }\n\n  const onAfterChange = (value) => {\n    setQueryMin(value[0]);\n    setQueryMax(value[1]);\n  }\n\n  return (\n    <React.Fragment>\n      <div className='mapbox__container mapbox__container--slider'>\n        <MapGL\n          {...viewport}\n          onViewportChange={(viewport) => {\n            setViewport(viewport)\n          }}\n          width='100%'\n          height='100%'\n          mapStyle='mapbox://styles/kalipsik/ckb2fyfqu123n1ilb5yi7uyns/'\n          mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_KEY}\n        >\n          <div className='mapbox__navi'>\n            <NavigationControl />\n          </div>\n          <Source type='geojson' data={data}>\n            <Layer {...{\n              type: 'circle',\n              paint: {\n                'circle-radius': {\n                  property: 'value',\n                  stops: [\n                    [{ zoom: 0, value: 10000 }, 2],\n                    [{ zoom: 0, value: 2000000 }, 20],\n                  ]\n                },\n                'circle-stroke-width': 0,\n                'circle-opacity': 0.6,\n                'circle-color': '#FF6492'\n              },\n            }\n            } />\n          </Source>\n        </MapGL>\n      </div>\n      <Row className=\"mapbox__slider\">\n        <Col span={3}>Rating range: </Col>\n        <Col span={2}><Tooltip placement=\"top\" title='minimal rating'>{Math.round(sliderCurMin / 1000)}k</Tooltip></Col>\n        <Col span={17} >\n          <Slider\n            range\n            min={sliderInitMin}\n            max={sliderInitMax}\n            step={1000}\n            value={[sliderCurMin, sliderCurMax]}\n            onChange={onChange}\n            onAfterChange={onAfterChange}\n            tooltipVisible={false}\n          />\n        </Col>\n        <Col span={2}><Tooltip placement=\"top\" title='maximal rating'>{Math.round(sliderCurMax / 1000)}k</Tooltip></Col>\n      </Row>\n    </React.Fragment>)\n}",["59","60"],"/home/benjamin/stackoverflow__example/dashboard-app/src/graphql/queries.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":26,"column":34,"nodeType":"67","messageId":"68","endLine":26,"endColumn":36},{"ruleId":"65","severity":1,"message":"66","line":26,"column":64,"nodeType":"67","messageId":"68","endLine":26,"endColumn":66},{"ruleId":"65","severity":1,"message":"69","line":29,"column":73,"nodeType":"67","messageId":"68","endLine":29,"endColumn":75},{"ruleId":"65","severity":1,"message":"69","line":29,"column":100,"nodeType":"67","messageId":"68","endLine":29,"endColumn":102},{"ruleId":"70","severity":1,"message":"71","line":42,"column":1,"nodeType":"72","endLine":111,"endColumn":3},{"ruleId":"70","severity":1,"message":"71","line":8,"column":1,"nodeType":"72","endLine":194,"endColumn":2},{"ruleId":"70","severity":1,"message":"71","line":64,"column":1,"nodeType":"72","endLine":168,"endColumn":2},{"ruleId":"70","severity":1,"message":"71","line":7,"column":1,"nodeType":"72","endLine":140,"endColumn":2},{"ruleId":"61","replacedBy":"73"},{"ruleId":"63","replacedBy":"74"},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '&&' and '||'.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["75"],["76"],"no-global-assign","no-unsafe-negation"]